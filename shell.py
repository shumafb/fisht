"""–°–æ–±—ã—Ç–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""

import asyncio

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from bot.keyboards import kb
from logic.ph_clean_phone_number import clean_phone_number
from logic.ph_numvox_check import get_phone_info
from logic.sms_center import send_sms, send_sms_smsc, check_report, check_sent_failed, get_message_id

router = Router() # [1]

loop = asyncio.get_event_loop()


operator_color = {"–º—Ç—Å": "üî¥", "–º–µ–≥–∞—Ñ–æ–Ω": "üü¢", "–±–∏–ª–∞–π–Ω": "üü°", "—Ç–µ–ª–µ2": "‚ö´", "–π–æ—Ç–∞": "üîµ"}
ping_sender = {"–º–æ–¥–µ–º": send_sms, "—Å–º—Å—Ü": send_sms_smsc}
ping_status = {"Send": "üü° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "Local_Failed": "‚≠ï –í–Ω. –æ—à–∏–±–∫–∞", "Report": "üü¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", "Failed": "üî¥ –û—à–∏–±–∫–∞"}

class BotStatesStorage(StatesGroup):
    list_phone = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤

@router.message(F.text.regexp(r"^(\+7|7|8|)?\d{10}"))
async def phone_menu(message: Message):
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if len(message.text) in [10, 11] and message.text.isdigit():
        phone = clean_phone_number(message.text.strip())
        info = f"‚ñ∂Ô∏èüì±<b>–¢–ï–õ–ï–§–û–ù</b>\n‚îú<b>–ù–æ–º–µ—Ä</b>: {phone}\n"
        numvox = get_phone_info(phone10=phone)
        if numvox is not None:
            color_operator = operator_color[numvox["operator"].lower()] if numvox["operator"].lower() in operator_color else "‚ùî"
            try:
                old_operator = f"‚îú<b>–ë—ã–≤—à–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä</b>: {numvox['old_operator']}\n"
            except KeyError:
                old_operator = ""

            info += f"‚îú<b>–û–ø–µ—Ä–∞—Ç–æ—Ä</b>: {color_operator} {numvox["operator"].title()}\n" + \
                    f"{old_operator}"+ \
                    f"‚îî<b>–ï–º–∫–æ—Å—Ç—å</b>: {numvox["region"]}\n"
        await message.answer(
            text=info,
            reply_markup=kb.phone_menu_kb(phone=phone),
            parse_mode="html"
            )
    elif len(message.text.split(" ")) == 2 and message.text.split(" ")[1].lower() in ['–º–æ–¥–µ–º', '—Å–º—Å—Ü']:
        sms_server = message.text.split(" ")[1]
        if sms_server == "—Å–º—Å—Ü":
            smsc_id = await loop.run_in_executor(None, ping_sender[sms_server],  phone)
            await message.answer(text=f"üü†üì©[*SMSC*]\n –û—Ç–ø—Ä–∞–≤–ª–µ–Ω Ping\n–ù–æ–º–µ—Ä:{phone}",
                                 reply_markup=kb.update_status_smsc(),
                                 )
        elif sms_server == "–º–æ–¥–µ–º":
            modem_id = 2 if numvox["operator"].lower() == "–±–∏–ª–∞–π–Ω" else 1
            send_file_name = await loop.run_in_executor(None, ping_sender[sms_server], phone, modem_id)
            await message.answer(text=f"üü†üì©[*–ú–û–î–ï–ú*]\n –û—Ç–ø—Ä–∞–≤–ª–µ–Ω Ping\n–ù–æ–º–µ—Ä:{phone}",
                                reply_markup=kb.update_status_modem(),
                                )
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–º—Å —á–µ—Ä–µ–∑ {message.text.split(" ")[1]}")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


@router.callback_query(F.data == "modem_ping")
async def send_modem_ping(message: Message):
    pass
    
@router.message(F.text.startswith("–º–æ–¥–µ–º"))
async def modem_ping_menu(message: Message, state: FSMContext):
    if len(message.text) > 5:
        phone_list = message.text.split("\n")[1:]
        cleaned_phones = []
        for phone in phone_list:
            cleaned_phones.append(clean_phone_number(phone))
        await state.update_data(phones=cleaned_phones)
        info = f"‚ñ∂Ô∏èüìÆ*–ú–û–î–ï–ú*\n\nüì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞*\n{"\n".join(cleaned_phones)}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
        await state.set_state(BotStatesStorage.list_phone)
        await message.answer(
            text=info,
            reply_markup=kb.agree_send_modem(),
        )
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")

@router.callback_query(F.data == "agree_send_modem")
async def send_modem_phones(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å –ø–æ —Å–ø–∏—Å–∫—É –Ω–æ–º–µ—Ä–æ–≤"""
    state_data = await state.get_data()
    phones_info = state_data["phones"]
    paths = {}
    phones_states = ""
    for phone in phones_info:
        phone_data = get_phone_info(phone)
        if phone_data:
            modem_id = 2 if phone_data["operator"].lower() in ["–±–∏–ª–∞–π–Ω", "beeline", "–≤—ã–º–ø–µ–ª–∫–æ–º"] else 1
            path = send_sms(phone=phone, modem_id=modem_id)
        else:
            path = send_sms(phone=phone, modem_id=1)
        paths[phone] = path
        phones_states += f"{phone} / {ping_status['Send']}\n"
    await state.update_data(paths=paths)
    await state.set_state(BotStatesStorage.list_phone)
    await callback.message.answer(
        text="‚ñ∂Ô∏èüìÆ*–ú–û–î–ï–ú*\n\nüì• *–°–æ—Å—Ç–æ—è–Ω–∏–µ*\n\n" +\
            "*–ù–æ–º–µ—Ä / –°—Ç–∞—Ç—É—Å*\n" +\
            f"{phones_states}",
        reply_markup=kb.update_status_list_modem()
    )

@router.callback_query(F.data == "update_status_list_modem")
async def update_momed_phones(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    paths = state_data["paths"]
    for phone, phone_data in paths.items():
        paths[phone].update(get_message_id(phone_data["path_file"]))
    print(paths)




@router.message(Command("help"))
async def help(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç")


@router.message(Command("id"))
async def cmd_get_id(message: Message):
    await message.answer(f"–¢–≤–æ–π Telegram ID: `{message.from_user.id}`")
