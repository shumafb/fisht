"""–°–æ–±—ã—Ç–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""

import asyncio

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message, URLInputFile

from bot import USERS_IDS, WAIT_TIME
from botcf.keyboards import kb
from logic.bs_html_constructor import bs_html_constructor
from logic.bs_html_preview import get_preview
from logic.bs_yandex_locator import push_yalocator_api
from logic.imei_checker import check_imei, check_taclist
from logic.imei_luhn_alg import luhn
from logic.ph_check import get_kodysu, get_smsbox, numvox
from logic.ph_clean_phone_number import clean_phone_number
from logic.sms_center import (check_report, check_sent_failed, get_balance,
                              get_message_id, send_sms, send_sms_smsc, give_report_content)
from logic.smsc_api import SMSC_LOGIN

router = Router() # [1]

operator_color = {
                "–º—Ç—Å": "üî¥", 
                "–º–µ–≥–∞—Ñ–æ–Ω": "üü¢", 
                "–±–∏–ª–∞–π–Ω": "üü°", 
                "—Ç–µ–ª–µ2": "‚ö´", 
                "–π–æ—Ç–∞": "üîµ"
                }
ping_sender = {
                "–º–æ–¥–µ–º": send_sms,
                "—Å–º—Å—Ü": send_sms_smsc
                }
ping_status = {
                "Send": "üü° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É",
                "Local_Failed": "‚≠ï –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞",
                "Report": "üü¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
                "Failed": "üî¥ –û—à–∏–±–∫–∞",
                "Undefined": "‚ò¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
                "Server_short": "‚ö™ –û—Ç–ø—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
                "Send_short": "üü° –û—Ç–ø—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä—É",
               }


class BotStatesStorage(StatesGroup):
    """–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞"""
    list_phone = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤

# –ë–ê–ó–û–í–´–ï –°–¢–ê–ù–¶–ò–ò
@router.message(F.text.regexp(r"^(1|2|20|99|62|32|60|34|33) (\d{1,8}) (\d+)"))
async def api_locator(message: Message):
    """–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–≤—å—é, html-—Ñ–∞–π–ª, —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ API
    """
    if message.from_user.id not in USERS_IDS:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    bslist = message.text.split("\n")
    yalocator_list = []
    text = "üì°\n‚îú–°—Ç–∞—Ç—É—Å:\n"
    flag = False
    for bs in bslist:
        mnc = bs.split(" ")[0]
        lac = bs.split(" ")[1]
        cid = bs.split(" ")[2]
        yalocator_card = push_yalocator_api(mnc=mnc, lac=lac, cid=cid)
        if yalocator_card is not None:
            yalocator_list.append(yalocator_card)
            text += f"‚îú{lac}/{cid} ‚úÖ\n"
            flag = True
        else:
            text += f"‚îú{lac}/{cid} ‚ùå\n"
    text += f"‚îî–í—Å–µ–≥–æ: {len(yalocator_list)}"
    if flag:
        bs_html_constructor(yalocator_list)
        await get_preview()
        await message.answer_photo(photo=FSInputFile("source/screen.png"))
    await message.answer(text=text)
    if flag:
        await message.answer_document(
            document=FSInputFile("source/bs_maps/map.html",
            filename="map.html"))

# IMEI
@router.message(F.text.regexp(r"^\d{14,15}$"))
async def imei_menu(message: Message):
    """–†–∞–±–æ—Ç–∞ —Å imei-–Ω–æ–º–µ—Ä–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–≤—å—é –º–æ–¥–µ–ª–∏ –∏ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    if message.from_user.id not in USERS_IDS:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    imei = message.text.strip()
    imei = luhn(imei[:14])
    tac = int(str(imei)[:8])
    imei_info = check_imei(imei=imei)
    tac_info = check_taclist(tac_code=tac)
    info = ""
    if imei_info is not None:
        imei_device = f"{imei_info['object']['brand']} {imei_info['object']['name']}"
        if imei_info["object"]["image"] is not None:
            image = URLInputFile(imei_info["object"]["image"])
            await message.answer_photo(image)
        info += f"üÜî\n<b>‚îúIMEI</b>: {imei}\n‚îî–ú–æ–¥–µ–ª—å: {imei_device}\n"
    if tac_info is not None:
        info += f"\nüÜë\n<b>‚îúTAC</b>: {tac}\n‚îî–ú–æ–¥–µ–ª—å: {tac_info}"
    await message.answer(
        text=info,
        reply_markup=kb.imei_keyboard(imei_device=imei_device, imei=imei),
        parse_mode="HTML")

# –ê–ë–û–ù–ï–ù–¢–°–ö–ò–ô –ù–û–ú–ï–†
@router.message(F.text.regexp(r"(?:([+]\d{1,4})[-.\s]?)?(?:[(](\d{1,3})[)][-.\s]?)?(\d{1,4})[-.\s]?(\d{1,4})[-.\s]?(\d{1,9})"))
async def phone_menu(message: Message, state: FSMContext):
    """–†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –†–æ—Å—Å–∏–∏

    Args:
        message (Message): —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    if message.from_user.id not in USERS_IDS:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    loop = asyncio.get_event_loop()
    phone = clean_phone_number(message.text.strip())
    info = f"üì±\n‚îú<b>–ù–æ–º–µ—Ä</b>: {phone}\n"
    if len(message.text.split(" ")) == 2 and message.text.split(" ")[1].lower() in ["—Å–º—Å—Ü", "smsc", "s", "c", "—Å–º—Å", "sms", "–º–æ–¥–µ–º", "–º", "modem", "m", "–º–æ–∂–µ–º"]:
        sms_server = message.text.split(" ")[1]
        phone = clean_phone_number(message.text.strip())
        numvox_data = numvox(phone10=phone)
        if sms_server in ["—Å–º—Å—Ü", "smsc", "s", "c", "—Å–º—Å", "sms"]:            
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, send_sms_smsc, phone)
            await state.update_data(sms_id=result)
            await message.answer(
                f"üì´ SMSC\n‚îú*–ù–æ–º–µ—Ä*: {phone}\n‚îî–°—Ç–∞—Ç—É—Å: ‚ö™ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
            )

        elif sms_server in ["–º–æ–¥–µ–º", "–º", "modem", "m", "–º–æ–∂–µ–º"]:
            modem_id = 2 if numvox_data["operator"].lower() in ["–±–∏–ª–∞–π–Ω", "beeline", "–≤—ã–º–ø–µ–ª–∫–æ–º"] else 1
            sending_info = await loop.run_in_executor(None, send_sms, phone, modem_id)
            await message.answer(
                f"üìÆ –ú–æ–¥–µ–º\n‚îú*–ù–æ–º–µ—Ä*: {phone}\n‚îî–°—Ç–∞—Ç—É—Å: ‚ö™ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
            )
            try:
                await asyncio.sleep(WAIT_TIME)
                sending_info.update(await loop.run_in_executor(None, check_sent_failed, sending_info["path_file"]))
                await state.update_data(sending_info=sending_info)
                await message.answer(
                    text=f"üìÆ –ú–æ–¥–µ–º\n‚îú<b>–ù–æ–º–µ—Ä</b>: {sending_info['info']['To']}\n‚îú–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sending_info['info']['Sent']}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status[sending_info['status']]}",
                    reply_markup=kb.update_status_modem(),
                    parse_mode="HTML"
                )
            except (TypeError, KeyError):
                if sending_info["info"] is not None:
                    await message.answer(
                        text=f"üìÆ –ú–æ–¥–µ–º\n<b>‚îú–ù–æ–º–µ—Ä</b>: {sending_info["info"]["To"]}\n‚îú–í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {sending_info['info']["Failed"]}\n‚îú–ü—Ä–∏—á–∏–Ω–∞: {sending_info["info"]["Fail_reason"]}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status['Local_Failed']}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                        parse_mode="HTML")
                else:
                    await message.answer(
                        text=f"üìÆ –ú–æ–¥–µ–º\n<b>‚îú–ù–æ–º–µ—Ä</b>: {phone}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status['Local_Failed']}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                        parse_mode="HTML")
    elif len(phone) in [10, 11] and phone.isdigit():
        numvox_data = numvox(phone10=phone)
        smsbox_data = get_smsbox(phone=phone)
        await state.update_data(numvox_data=numvox_data)
        if numvox_data is not None:
            color_operator = operator_color[numvox_data["operator"].lower()] if numvox_data["operator"].lower() in operator_color else "‚ö™"
            try:
                old_operator = f"‚îú–°—Ç–∞—Ä—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {numvox_data['old_operator']}\n"
            except KeyError:
                old_operator = ""

            info += f"‚îú–û–ø–µ—Ä–∞—Ç–æ—Ä: {color_operator} {numvox_data["operator"].title()}\n" + \
                    f"{old_operator}"+ \
                    f"‚îú–†–µ–≥–∏–æ–Ω: {numvox_data["region"]}\n" +\
                    f"‚îî–ò—Å—Ç–æ—á–Ω–∏–∫: ü¶ä numvox\n"
        elif numvox_data is None:
            kodysu_data = get_kodysu(phone)
            if kodysu_data is not None:
                for card in kodysu_data:
                    info += f"‚îú{card}\n"
                info += f"‚îî–ò—Å—Ç–æ—á–Ω–∏–∫: ‚òé kodysu\n"
                await message.answer(
                    text=info,
                    reply_markup=kb.phone_menu_kb_world(phone=phone),
                    parse_mode="html"
                )
        if smsbox_data is not None:
            if smsbox_data[1].strip().lower() == "–∫—Ç–æ –∑–≤–æ–Ω–∏—Ç —Å –Ω–æ–º–µ—Ä–∞, –∑–∞—á–µ–º –∏ –∫–∞–∫ —á–∞—Å—Ç–æ":
                pass
            else:
                info += f"\nüì¶ mysmsbox\n‚îî‚õî {smsbox_data[1].strip()}"
        if numvox_data is not None:
            await message.answer(
                text=info,
                reply_markup=kb.phone_menu_kb(phone=phone),
                parse_mode="html"
                )
        await state.update_data(phone=phone)
    elif len(phone) == 12 and phone.isdigit():
        kodysu_data = get_kodysu(phone)
        if kodysu_data is not None:
            for card in kodysu_data:
                info += f"‚îú{card}\n"
            info +="‚îî–ò—Å—Ç–æ—á–Ω–∏–∫: ‚òé kodysu\n"
        await message.answer(
            text=info,
            parse_mode="html",
            reply_markup=kb.phone_menu_kb_world(phone=phone)
            )
        await state.update_data(phone=phone)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞2")

# –ü–ò–ù–ì –ß–ï–†–ï–ó –ö–ù–û–ü–ö–£
@router.callback_query(F.data.startswith("ping"))
async def send_modem_ping(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ Ping —Å–º—Å —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    """
    if callback.from_user.id not in USERS_IDS:
        return callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    action = callback.data.split("_")[1]
    if action.lower() == "modem":
        numvox_data = await state.get_data()
        numvox_data = numvox_data["numvox_data"]
        modem_id = 2 if numvox_data["operator"].lower() in ["–±–∏–ª–∞–π–Ω", "beeline", "–≤—ã–º–ø–µ–ª–∫–æ–º"] else 1
        loop = asyncio.get_event_loop()
        phone = await state.get_data()
        phone = phone["phone"]
        sending_info = await loop.run_in_executor(None, send_sms, phone, modem_id)
        await callback.answer("‚ùó–ó–∞–ø—Ä–æ—Å –Ω–∞ ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ")
        await callback.message.answer(
            f"üìÆ –ú–æ–¥–µ–º\n‚îú*–ù–æ–º–µ—Ä*: {phone}\n‚îî–°—Ç–∞—Ç—É—Å: ‚ö™ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
        )
        try:
            await asyncio.sleep(WAIT_TIME)
            sending_info.update(await loop.run_in_executor(None, check_sent_failed, sending_info["path_file"]))
            await state.update_data(sending_info=sending_info)
            await callback.message.answer(
                text=f"üìÆ –ú–æ–¥–µ–º\n‚îú<b>–ù–æ–º–µ—Ä</b>: {sending_info["info"]["To"]}\n‚îú–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sending_info["info"]['Sent']}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status[sending_info["status"]]}",
                reply_markup=kb.update_status_modem(),
                parse_mode="HTML"
            )
        except (TypeError, KeyError):
            if sending_info["info"] is not None:
                await callback.message.answer(
                    text=f"üìÆ –ú–æ–¥–µ–º\n<b>‚îú–ù–æ–º–µ—Ä</b>: {sending_info["info"]["To"]}\n‚îú–í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {sending_info['info']["Failed"]}\n‚îú–ü—Ä–∏—á–∏–Ω–∞: {sending_info["info"]["Fail_reason"]}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status['Local_Failed']}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                    parse_mode="HTML")
            else:
                await callback.message.answer(
                    text=f"üìÆ –ú–æ–¥–µ–º\n<b>‚îú–ù–æ–º–µ—Ä</b>: {phone}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status['Local_Failed']}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                    parse_mode="HTML")
    elif action.lower() == "smsc":
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, send_sms_smsc, phone)
        await state.update_data(sms_id=result)
        await callback.message.answer(
            f"üì´ SMSC\n‚îú*–ù–æ–º–µ—Ä*: {phone}\n‚îî–°—Ç–∞—Ç—É—Å: ‚ö™ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
        )

# –ñ–ï–°–¢–ö–ò–ô –ü–ò–ù–ì –ß–ï–†–ï–ó –ö–ù–û–ü–ö–£
@router.callback_query(F.data.startswith("forced_ping_modem__"))
async def forced_send_modem_ping(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in USERS_IDS:
        return callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    loop = asyncio.get_event_loop()
    modem_id = callback.data.split("__")[1]
    phone = await state.get_data()
    phone = phone["phone"]
    sending_info = await loop.run_in_executor(None, send_sms, phone, modem_id)

    await callback.answer("‚ùó–ó–∞–ø—Ä–æ—Å –Ω–∞ ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ")
    await callback.message.answer(
        f"üìÆ –ú–æ–¥–µ–º\n‚îú*–ù–æ–º–µ—Ä*: {phone}\n‚îî–°—Ç–∞—Ç—É—Å: ‚ö™ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
        )
    try:
        await asyncio.sleep(WAIT_TIME)
        sending_info.update(await loop.run_in_executor(None, check_sent_failed, sending_info["path_file"]))
        await state.update_data(sending_info=sending_info)
        print(sending_info)
        await callback.message.answer(
            text=f"üìÆ –ú–æ–¥–µ–º\n‚îú<b>–ù–æ–º–µ—Ä</b>: {sending_info["info"]["To"]}\n‚îú–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sending_info["info"]['Sent']}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status[sending_info["status"]]}",
            reply_markup=kb.update_status_modem(),
            parse_mode="HTML"
        )
    except (TypeError, KeyError):
        if sending_info["info"] is not None:
            print(sending_info)
            await callback.message.answer(
                text=f"üìÆ –ú–æ–¥–µ–º\n<b>‚îú–ù–æ–º–µ—Ä</b>: {sending_info["info"]["To"]}\n‚îú–í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {sending_info['info']["Failed"]}\n‚îú–ü—Ä–∏—á–∏–Ω–∞: {sending_info["info"]["Fail_reason"]}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status['Local_Failed']}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                parse_mode="HTML")
        else:
            await callback.message.answer(
                text=f"üìÆ –ú–æ–¥–µ–º\n<b>‚îú–ù–æ–º–µ—Ä</b>: {phone}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status['Local_Failed']}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                parse_mode="HTML")

# –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ü–ò–ù–ì (–û–ë–©–ò–ô)
@router.callback_query(F.data.startswith("update_status_ping_alone"))
async def update_modem(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in USERS_IDS:
        return callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    loop = asyncio.get_event_loop()

    sending_info = await state.get_data()
    sending_info = sending_info["sending_info"]

    action = callback.data.split("__")[1]
    amount = callback.data.split("__")[2]

    message_id = sending_info["info"]["Message_id"]
    modem_id = sending_info["info"]["Modem"][-1:]
    print(sending_info, "update but")
    print(message_id, modem_id)
    print(action, amount)

    if action == "modem" and amount == "alone":
        try:
            updating_info = await loop.run_in_executor(None, check_report, message_id, modem_id)
            if updating_info is not None:
                sending_info.update(updating_info)
            try:
                if sending_info["info"]["Status"].split(",", 1)[0] == "0":
                    await callback.message.answer(
                        text=f"üìÆ –ú–æ–¥–µ–º\n‚îú<b>–ù–æ–º–µ—Ä</b>: {sending_info["info"]["From"]}\n‚îú–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sending_info["info"]['Sent']}\n‚îú–í–µ—Ä–Ω—É–ª—Å—è: {sending_info["info"]["Received"]}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status[sending_info["status"]] if sending_info["info"]["Status"].split(",", 1)[0] == "0" else ping_status["Failed"]}",
                        parse_mode="HTML"
                    )
                else:
                    await callback.message.answer(
                        text=f"üìÆ –ú–æ–¥–µ–º\n‚îú<b>–ù–æ–º–µ—Ä</b>: {sending_info["info"]["From"]}\n" +\
                        f"‚îú–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sending_info["info"]['Sent']}\n" +\
                        f"‚îú–í–µ—Ä–Ω—É–ª—Å—è: {sending_info["info"]["Received"]}\n" +\
                        f"‚îú–ü—Ä–∏—á–∏–Ω–∞: {sending_info["info"]["Status"]} /statuslist\n"
                        f"‚îî–°—Ç–∞—Ç—É—Å: {ping_status[sending_info["status"]] if sending_info["info"]["Status"].split(",", 1) == "0" else ping_status["Failed"]}",
                        parse_mode="HTML"
                    )
            except KeyError:
                await callback.message.answer(
                    text=f"üìÆ –ú–æ–¥–µ–º\n‚îú<b>–ù–æ–º–µ—Ä</b>: {sending_info["info"]["To"]}\n‚îú–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sending_info["info"]['Sent']}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status[sending_info["status"]]}",
                    reply_markup=kb.update_status_modem(),
                    parse_mode="HTML"
                )

        except FileNotFoundError:
            await callback.message.answer(
                text=f"üìÆ –ú–æ–¥–µ–º\n‚îú<b>–ù–æ–º–µ—Ä</b>: {sending_info["info"]["To"]}\n‚îú–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sending_info["info"]['Sent']}\n‚îî–°—Ç–∞—Ç—É—Å: {ping_status[sending_info["status"]]}",
                reply_markup=kb.update_status_modem(),
                parse_mode="HTML"
            )
    elif action == "smsc":
        pass

# –ü–ò–ù–ì –°–ü–ò–°–û–ö –ù–û–ú–ï–†–û–í
@router.message(F.text.startswith("–º–æ–¥–µ–º"))
async def modem_ping_menu(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ ping-—Å–º—Å –ø–æ —Å–ø–∏—Å–∫—É –Ω–æ–º–µ—Ä–æ–≤"""
    if len(message.text) > 5:
        phone_list = message.text.split("\n")[1:]
        cleaned_phones = []
        for phone in phone_list:
            cleaned_phones.append(clean_phone_number(phone))
        await state.update_data(phones=cleaned_phones)
        info = f"üìÆ –ú–æ–¥–µ–º\n‚îú*–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞*:\n‚îú{'\n‚îú'.join(cleaned_phones)}\n‚îî–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É"
        await state.set_state(BotStatesStorage.list_phone)
        await message.answer(
            text=info,
            reply_markup=kb.agree_send_modem(),
        )
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")


@router.callback_query(F.data == "agree_send_ping_modem")
async def send_modem_phones(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å –ø–æ —Å–ø–∏—Å–∫—É –Ω–æ–º–µ—Ä–æ–≤"""
    if callback.from_user.id not in USERS_IDS:
        return callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    loop = asyncio.get_event_loop()
    state_data = await state.get_data()
    phones_info = state_data["phones"]
    paths = {}
    phones_states = ""
    for phone in phones_info:
        phone_data = numvox(phone)
        if phone_data:
            modem_id = 2 if phone_data["operator"].lower() in ["–±–∏–ª–∞–π–Ω", "beeline", "–≤—ã–º–ø–µ–ª–∫–æ–º"] else 1
            # sending_info = send_sms(phone=phone, modem_id=modem_id)
            sending_info = await loop.run_in_executor(None, send_sms, phone, modem_id)
            paths[phone] = sending_info
        elif phone_data is None:
            sending_info = None
        phones_states += f"‚îú{phone} | {ping_status['Server_short'] if sending_info is not None else ping_status["Local_Failed"]}\n"
    await state.update_data(paths=paths)
    await state.set_state(BotStatesStorage.list_phone)
    await callback.message.answer(
        text="üìÆ –ú–æ–¥–µ–º\n‚îú–°–æ—Å—Ç–æ—è–Ω–∏–µ:\n" +\
            f"{phones_states}" +\
            f"‚îî–í—Å–µ–≥–æ: {len(paths)}",
        parse_mode="HTML"
    )
    phones_states = ""
    await asyncio.sleep(WAIT_TIME)
    for phone, sending_info in paths.items():
        sending_info.update(await loop.run_in_executor(None, check_sent_failed, sending_info["path_file"]))
        # sending_info.update(await loop.run_in_executor(None, check_sent_failed, "9994492792-Z0LcmI.txt")) # failed
        # sending_info.update(await loop.run_in_executor(None, check_sent_failed, "9994492792-lhWmON.txt")) # sent
        phones_states += f"‚îú{sending_info["info"]["To"]} | {ping_status[sending_info["status"]] if sending_info is not None else ping_status["Local_Failed"]}\n"
    await callback.message.answer(
        text="üìÆ –ú–æ–¥–µ–º\n‚îú–°–æ—Å—Ç–æ—è–Ω–∏–µ:\n" +\
            f"{phones_states}" +\
            f"‚îî–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(paths)}",
        reply_markup=kb.update_status_list_modem(),
        parse_mode="HTML"
    )
    await state.update_data(paths=paths)

@router.callback_query(F.data == "update_status_ping__modem__list")
async def update_modem_phones(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in USERS_IDS:
        return callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    loop = asyncio.get_event_loop()

    phones_states = ""

    state_data = await state.get_data()
    paths = state_data["paths"]
    for phone, sending_info in paths.items():
        message_id = sending_info["info"]["Message_id"]
        modem_id = sending_info["info"]["Modem"][-1:]
        updating_info = await loop.run_in_executor(None, check_report, message_id, modem_id)
        if updating_info is not None:
            sending_info.update(updating_info)
        if sending_info["status"] == "Report":
            if sending_info["info"]["Status"].split(",", 1)[0] == "0":
                phones_states += f"‚îú{sending_info["info"]["From"]} | {ping_status[sending_info["status"]] if sending_info is not None else ping_status["Local_Failed"]}\n"
            else:
                phones_states += f"‚îú{sending_info["info"]["From"]} | {ping_status["Undefined"] if sending_info is not None else ping_status["Local_Failed"]}\n"
        elif sending_info["status"] == "Send":
            phones_states += f"‚îú{sending_info["info"]["To"]} | {ping_status[sending_info["status"]] if sending_info is not None else ping_status["Local_Failed"]}\n"
    await state.update_data(paths=paths)
    await callback.message.answer(
        text="üìÆ –ú–æ–¥–µ–º\n‚îú–°–æ—Å—Ç–æ—è–Ω–∏–µ:\n" +\
            f"{phones_states}" +\
            f"‚îî–í—Å–µ–≥–æ: {len(paths)}",
        reply_markup=kb.update_status_list_modem(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "get_ping_modem_list_reports")
async def get_modem_list_reports(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in USERS_IDS:
        return callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    loop = asyncio.get_event_loop()
    state_data = await state.get_data()
    paths = state_data["paths"]
    report_path = await loop.run_in_executor(None, give_report_content, paths)
    await callback.message.answer_document(
        document=FSInputFile(path=report_path, filename="–æ—Ç—á–µ—Ç.csv"))



# –ü–æ–ª—É—á–∏—Ç—å –î–û–ú–û–§–û–ù–´
@router.message(Command("door"))
async def get_doorcodes(message: Message):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥—ã –¥–æ–º–æ—Ñ–æ–Ω–æ–≤ –≤ html'''
    if message.from_user.id not in USERS_IDS:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    await message.answer_document(
        document=FSInputFile(path="source/doorcodes.html",
                             filename="doorcodes.html"))   

# –ü–û–õ–£–ß–ò–¢–¨ HELP
@router.message(Command("help"))
async def get_help(message: Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞
    """
    if message.from_user.id not in USERS_IDS:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    with open("source/texts/help.txt", "r", encoding="utf-8") as f:
        help_text = f.read()
        await message.answer(help_text)

# –ü–û–õ–£–ß–ò–¢–¨ ID
@router.message(Command("id"))
async def cmd_get_id(message: Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞ —é–∑–µ—Ä–∞
    """
    await message.answer(f"–¢–≤–æ–π Telegram ID: `{message.from_user.id}`")

# –ü–û–õ–£–ß–ò–¢–¨ –°–ü–ò–°–û–ö –°–¢–ê–¢–£–°–û–í –†–ï–ü–û–†–¢–û–í
@router.message(Command("statuslist"))
async def get_status_list(message:Message):
    with open("source/texts/modem_status.txt", "r", encoding="utf-8") as f:
        await message.answer(
            text=f.read(),
            parse_mode="HTML"
            )

@router.message(Command("balance"))
async def cmd_balance(message: Message):
    if message.from_user.id not in USERS_IDS:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {SMSC_LOGIN}!\n–ë–∞–ª–∞–Ω—Å SMSC: <b>{get_balance()} —Ä—É–±</b>",
        parse_mode="HTML",
    )

# –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –õ–ï–í–´–• –ó–ê–ü–†–û–°–û–í
@router.message(F.text.regexp(r"."))
async def try_again(message: Message):
    """–ó–∞–≥–ª—É—à–∫–∞ –æ—Ç '–ª–µ–≤—ã—Ö' –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if message.from_user.id not in USERS_IDS:
        return message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    await message.answer(
        "–ó–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
    )
